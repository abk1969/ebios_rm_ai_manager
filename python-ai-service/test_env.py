#!/usr/bin/env python3
"""
üß™ TEST DE L'ENVIRONNEMENT PYTHON AI
Validation de l'isolation et des d√©pendances
"""

import sys
import os

def test_environment():
    print("üß™ Test de l'environnement Python AI")
    print(f"Python version: {sys.version}")
    print(f"Python executable: {sys.executable}")
    print(f"Working directory: {os.getcwd()}")
    
    # Test des imports critiques
    try:
        import flask
        print(f"‚úÖ Flask {flask.__version__}")
    except ImportError as e:
        print(f"‚ùå Flask: {e}")
        
    try:
        import flask_cors
        print(f"‚úÖ Flask-CORS disponible")
    except ImportError as e:
        print(f"‚ùå Flask-CORS: {e}")
        
    try:
        import openai
        print(f"‚úÖ OpenAI {openai.__version__}")
    except ImportError as e:
        print(f"‚ùå OpenAI: {e}")
        
    try:
        import langchain
        print(f"‚úÖ LangChain {langchain.__version__}")
    except ImportError as e:
        print(f"‚ùå LangChain: {e}")
        
    try:
        import sqlalchemy
        print(f"‚úÖ SQLAlchemy {sqlalchemy.__version__}")
    except ImportError as e:
        print(f"‚ùå SQLAlchemy: {e}")
        
    print("\nüéØ Test de cr√©ation d'une app Flask simple...")
    try:
        from flask import Flask
        test_app = Flask(__name__)
        
        @test_app.route('/health')
        def health():
            return {'status': 'healthy', 'service': 'ebios-ai'}
            
        print("‚úÖ App Flask cr√©√©e avec succ√®s")
        return True
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation Flask: {e}")
        return False

if __name__ == "__main__":
    success = test_environment()
    sys.exit(0 if success else 1)
