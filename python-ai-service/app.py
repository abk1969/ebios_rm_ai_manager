"""
üöÄ EBIOS AI Service - Version Cloud Run
Service Python optimis√© pour Google Cloud Run
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import logging
import json
from datetime import datetime

# Configuration base de donn√©es unifi√©e
from config.database import init_database, get_db_session, database_health, close_database
from models.ai_models import AISession, AgentMemory, AISuggestion, SemanticAnalysis, AIQueryCache, AIMetric

# Configuration de l'application Flask
app = Flask(__name__)

# Configuration CORS pour le d√©veloppement local
if os.environ.get('FLASK_ENV') == 'development':
    CORS(app, origins=["http://localhost:5173", "http://localhost:3000", "http://localhost:5174"])
    print("Mode developpement local active")
else:
    CORS(app, origins=["*"])  # Permettre toutes les origines pour Cloud Run

# Configuration du logging pour Cloud Run
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Initialisation de la base de donn√©es
database_initialized = False

def initialize_app():
    """Initialise l'application et la base de donn√©es"""
    global database_initialized
    if not database_initialized:
        logger.info("üîó Initialisation de la base de donn√©es PostgreSQL...")
        if init_database():
            database_initialized = True
            logger.info("‚úÖ Base de donn√©es PostgreSQL connect√©e")
        else:
            logger.error("‚ùå Erreur connexion PostgreSQL - Mode d√©grad√©")
    return database_initialized

@app.route('/', methods=['GET'])
def root():
    """Page d'accueil du service"""
    return jsonify({
        'message': 'ü§ñ EBIOS AI Service is running on Cloud Run!',
        'service': 'EBIOS AI Manager - Python Service',
        'version': '1.0.0',
        'environment': os.environ.get('ENVIRONMENT', 'production'),
        'timestamp': datetime.now().isoformat(),
        'endpoints': {
            'health': '/health',
            'analyze': '/api/ai/analyze',
            'suggestions': '/api/ai/suggestions',
            'validate': '/api/ai/validate'
        }
    }), 200

@app.route('/health', methods=['GET'])
def health_check():
    """Point de contr√¥le de sant√© avec v√©rification base de donn√©es"""
    # V√©rifier la base de donn√©es
    db_status = database_health()

    overall_status = 'healthy' if db_status.get('status') == 'healthy' else 'degraded'

    return jsonify({
        'status': overall_status,
        'service': 'EBIOS AI Service',
        'version': '1.0.0',
        'timestamp': datetime.now().isoformat(),
        'environment': os.environ.get('ENVIRONMENT', 'production'),
        'port': os.environ.get('PORT', '8081'),
        'database': db_status,
        'features': {
            'postgresql': database_initialized,
            'ai_suggestions': True,
            'semantic_analysis': True,
            'agent_memory': True
        }
    }), 200

@app.route('/api/ai/analyze', methods=['POST'])
def analyze_ebios():
    """Analyse IA pour les donn√©es EBIOS"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'error': 'Aucune donn√©e fournie'}), 400
        
        # Simulation d'analyse IA avanc√©e
        analysis_type = data.get('type', 'general')
        content = data.get('content', '')
        mission_context = data.get('mission_context', {})
        
        # Analyse contextuelle bas√©e sur le type
        recommendations = []
        risk_level = 'low'
        
        if analysis_type == 'supporting_assets':
            recommendations = [
                'Identifier tous les actifs supports critiques',
                '√âvaluer les d√©pendances entre actifs',
                'Documenter les mesures de protection existantes',
                'Analyser les vuln√©rabilit√©s potentielles'
            ]
            risk_level = 'medium'
        elif analysis_type == 'essential_assets':
            recommendations = [
                'Classer les actifs par criticit√© m√©tier',
                'D√©finir les crit√®res de s√©curit√© (DICP)',
                'Identifier les processus m√©tier associ√©s',
                '√âvaluer l\'impact en cas de compromission'
            ]
            risk_level = 'high'
        elif analysis_type == 'dreaded_events':
            recommendations = [
                'Analyser les sc√©narios de menaces r√©alistes',
                '√âvaluer la vraisemblance des √©v√©nements',
                'Identifier les sources de risques',
                'Proposer des mesures de traitement'
            ]
            risk_level = 'high'
        else:
            recommendations = [
                'Suivre la m√©thodologie EBIOS Risk Manager',
                'Impliquer toutes les parties prenantes',
                'Documenter toutes les d√©cisions',
                'R√©viser r√©guli√®rement l\'analyse'
            ]
        
        result = {
            'analysis': f'Analyse IA pour {analysis_type}',
            'recommendations': recommendations,
            'risk_level': risk_level,
            'confidence': 0.85,
            'timestamp': datetime.now().isoformat(),
            'processed_content_length': len(content),
            'mission_context': mission_context.get('name', 'Non sp√©cifi√©e')
        }
        
        logger.info(f"Analyse effectu√©e pour: {analysis_type} - Mission: {mission_context.get('name', 'N/A')}")
        return jsonify(result), 200
        
    except Exception as e:
        logger.error(f"Erreur lors de l'analyse: {str(e)}")
        return jsonify({'error': 'Erreur interne du serveur', 'details': str(e)}), 500

@app.route('/api/ai/suggestions', methods=['POST'])
def get_suggestions():
    """Obtenir des suggestions IA contextuelles"""
    try:
        data = request.get_json()
        context = data.get('context', 'workshop1')
        workshop_step = data.get('step', 'general')
        
        suggestions_map = {
            'workshop1_step1': [
                'üéØ Identifier le p√©rim√®tre de l\'√©tude',
                'üìã Lister tous les actifs essentiels',
                'üîç Analyser les processus m√©tier critiques',
                '‚öñÔ∏è √âvaluer les crit√®res de s√©curit√© (DICP)'
            ],
            'workshop1_step2': [
                'üèóÔ∏è Cartographier les actifs supports',
                'üîó Identifier les d√©pendances',
                'üõ°Ô∏è Recenser les mesures de s√©curit√©',
                'üìä √âvaluer la maturit√© s√©curitaire'
            ],
            'workshop1_step3': [
                '‚ö†Ô∏è Identifier les √©v√©nements redout√©s',
                'üí• Analyser les impacts potentiels',
                'üìà √âvaluer les niveaux de gravit√©',
                'üéØ Prioriser les risques'
            ],
            'general': [
                'üìö Suivre la m√©thodologie EBIOS RM',
                'üë• Impliquer toutes les parties prenantes',
                'üìù Documenter toutes les d√©cisions',
                'üîÑ R√©viser r√©guli√®rement l\'analyse'
            ]
        }
        
        key = f"{context}_{workshop_step}" if workshop_step != 'general' else context
        suggestions = suggestions_map.get(key, suggestions_map['general'])
        
        result = {
            'suggestions': suggestions,
            'context': context,
            'step': workshop_step,
            'timestamp': datetime.now().isoformat(),
            'total_suggestions': len(suggestions)
        }
        
        logger.info(f"Suggestions g√©n√©r√©es pour: {context} - √âtape: {workshop_step}")
        return jsonify(result), 200
        
    except Exception as e:
        logger.error(f"Erreur lors de la g√©n√©ration de suggestions: {str(e)}")
        return jsonify({'error': 'Erreur interne du serveur'}), 500

@app.route('/api/ai/validate', methods=['POST'])
def validate_data():
    """Valider les donn√©es EBIOS selon les standards ANSSI"""
    try:
        data = request.get_json()
        
        validation_result = {
            'is_valid': True,
            'errors': [],
            'warnings': [],
            'score': 100,
            'recommendations': [],
            'timestamp': datetime.now().isoformat()
        }
        
        # Validation du nom de mission
        if not data.get('mission_name'):
            validation_result['errors'].append('‚ùå Nom de mission manquant')
            validation_result['is_valid'] = False
            validation_result['score'] -= 25
        
        # Validation des actifs essentiels
        essential_assets = data.get('essential_assets', [])
        if not essential_assets:
            validation_result['warnings'].append('‚ö†Ô∏è Aucun actif essentiel d√©fini')
            validation_result['score'] -= 15
        elif len(essential_assets) < 3:
            validation_result['warnings'].append('‚ö†Ô∏è Peu d\'actifs essentiels identifi√©s')
            validation_result['score'] -= 5
        
        # Validation des actifs supports
        supporting_assets = data.get('supporting_assets', [])
        if not supporting_assets:
            validation_result['warnings'].append('‚ö†Ô∏è Aucun actif support d√©fini')
            validation_result['score'] -= 10
        
        # Validation des √©v√©nements redout√©s
        dreaded_events = data.get('dreaded_events', [])
        if not dreaded_events:
            validation_result['warnings'].append('‚ö†Ô∏è Aucun √©v√©nement redout√© d√©fini')
            validation_result['score'] -= 20
        
        # G√©n√©ration des recommandations
        if validation_result['score'] >= 80:
            validation_result['recommendations'].append('‚úÖ Donn√©es conformes aux standards ANSSI')
            validation_result['recommendations'].append('‚úÖ Structure EBIOS respect√©e')
        else:
            validation_result['recommendations'].append('üîß Compl√©ter les donn√©es manquantes')
            validation_result['recommendations'].append('üìã R√©viser la m√©thodologie EBIOS')
        
        logger.info(f"Validation effectu√©e - Score: {validation_result['score']}")
        return jsonify(validation_result), 200
        
    except Exception as e:
        logger.error(f"Erreur lors de la validation: {str(e)}")
        return jsonify({'error': 'Erreur interne du serveur'}), 500

@app.errorhandler(404)
def not_found(error):
    return jsonify({'error': 'Endpoint non trouv√©'}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({'error': 'Erreur interne du serveur'}), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8081))
    debug_mode = os.environ.get('FLASK_ENV') == 'development'

    # Initialiser l'application
    initialize_app()

    if debug_mode:
        logger.info(f"üè† D√©marrage du service EBIOS AI en mode d√©veloppement sur le port {port}")
        print(f"üåê Service accessible sur: http://localhost:{port}")
        print(f"üîç Health check: http://localhost:{port}/health")
        print(f"ü§ñ API d'analyse: http://localhost:{port}/api/ai/analyze")
        print(f"üóÑÔ∏è Base de donn√©es: {'PostgreSQL' if database_initialized else 'Mode d√©grad√©'}")
    else:
        logger.info(f"üöÄ D√©marrage du service EBIOS AI sur le port {port}")

    try:
        app.run(host='0.0.0.0', port=port, debug=debug_mode)
    finally:
        # Nettoyage √† la fermeture
        close_database()
