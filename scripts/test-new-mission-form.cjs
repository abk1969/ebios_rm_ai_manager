/**
 * üß™ TEST DU NOUVEAU FORMULAIRE DE MISSION AVEC CONTEXTE
 * Script pour tester la cr√©ation d'une mission avec le nouveau parcours UI/UX
 */

const { initializeApp } = require('firebase/app');
const { getFirestore, collection, addDoc, getDocs } = require('firebase/firestore');

// Configuration Firebase (√Ä REMPLACER PAR VOS VRAIES VALEURS)
const firebaseConfig = {
  apiKey: process.env.VITE_FIREBASE_API_KEY || "your_firebase_api_key_here",
  authDomain: process.env.VITE_FIREBASE_AUTH_DOMAIN || "your-project.firebaseapp.com",
  projectId: process.env.VITE_FIREBASE_PROJECT_ID || "your_project_id",
  storageBucket: process.env.VITE_FIREBASE_STORAGE_BUCKET || "your-project.firebasestorage.app",
  messagingSenderId: process.env.VITE_FIREBASE_MESSAGING_SENDER_ID || "your_sender_id",
  appId: process.env.VITE_FIREBASE_APP_ID || "your_app_id"
};

// Initialisation Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// Donn√©es de test pour une mission avec contexte complet
const testMissionData = {
  name: "Mission EBIOS RM - Centre Hospitalier Universitaire de Lyon",
  description: "Analyse de risques EBIOS RM pour la modernisation du syst√®me d'information hospitalier et la mise en conformit√© avec les exigences HDS (H√©bergement de Donn√©es de Sant√©).",
  status: "draft",
  dueDate: new Date(Date.now() + 6 * 30 * 24 * 60 * 60 * 1000).toISOString(), // 6 mois
  assignedTo: ["user123"],
  
  // Contexte organisationnel
  organizationContext: {
    organizationType: "public",
    sector: "Sant√© et m√©dico-social",
    size: "enterprise",
    regulatoryRequirements: [
      "RGPD",
      "HDS (H√©bergement de Donn√©es de Sant√©)",
      "ANSSI",
      "Code de la sant√© publique"
    ],
    securityObjectives: [
      "Prot√©ger les donn√©es patients",
      "Assurer la continuit√© des soins",
      "Maintenir la confidentialit√© m√©dicale",
      "Garantir l'int√©grit√© des dossiers m√©dicaux"
    ],
    constraints: [
      "Budget limit√© du secteur public",
      "Personnel m√©dical non-technique",
      "Contraintes de disponibilit√© 24h/24"
    ]
  },

  // P√©rim√®tre d'analyse
  scope: {
    boundaries: "Syst√®me d'information hospitalier du CHU de Lyon",
    inclusions: [
      "ERP hospitalier (Syst√®me de gestion int√©gr√©)",
      "Bases de donn√©es critiques",
      "Infrastructure r√©seau",
      "Syst√®mes de sauvegarde",
      "Outils collaboratifs"
    ],
    exclusions: [
      "√âquipements m√©dicaux non connect√©s",
      "Syst√®mes des partenaires externes"
    ],
    timeFrame: {
      start: new Date().toISOString(),
      end: new Date(Date.now() + 6 * 30 * 24 * 60 * 60 * 1000).toISOString()
    },
    geographicalScope: ["National"]
  },

  // Conformit√© EBIOS
  ebiosCompliance: {
    version: "1.5",
    completionPercentage: 0,
    complianceGaps: [],
    certificationLevel: "basic",
    validatedWorkshops: []
  },

  // Contexte de mission pour les agents IA
  missionContext: {
    organizationName: "Centre Hospitalier Universitaire de Lyon",
    sector: "Sant√© et m√©dico-social",
    organizationSize: "Grande entreprise (> 5000 employ√©s)",
    geographicScope: "National",
    criticalityLevel: "Critique",
    siComponents: [
      "ERP hospitalier (Syst√®me de gestion int√©gr√©)",
      "Bases de donn√©es critiques",
      "Infrastructure r√©seau",
      "Syst√®mes de sauvegarde",
      "Outils collaboratifs"
    ],
    criticalProcesses: [
      "Gestion des patients",
      "Dossier m√©dical partag√©",
      "Prescription m√©dicamenteuse",
      "Gestion des urgences",
      "Facturation et remboursements",
      "Planification des interventions"
    ],
    stakeholders: [
      "Patients",
      "Personnel m√©dical",
      "Personnel administratif",
      "Fournisseurs de soins",
      "Autorit√©s de sant√©",
      "Assurance maladie"
    ],
    regulations: [
      "RGPD",
      "HDS (H√©bergement de Donn√©es de Sant√©)",
      "ANSSI",
      "Code de la sant√© publique"
    ],
    financialStakes: "Budget annuel IT: 15M‚Ç¨, CA: 800M‚Ç¨, Impact potentiel interruption: 2M‚Ç¨/jour",
    securityMaturity: "D√©fini (Niveau 3)",
    missionObjectives: [
      "Identifier les risques critiques sur les donn√©es patients",
      "Am√©liorer la posture s√©curit√© du SI hospitalier",
      "Obtenir la certification HDS",
      "R√©duire les risques de cyberattaques",
      "Assurer la continuit√© des soins"
    ],
    timeframe: "6 mois",
    specificRequirements: "Mission critique pour l'obtention de la certification HDS. N√©cessite une approche m√©thodique EBIOS RM avec validation ANSSI. Contraintes de disponibilit√© 24h/24 pour les syst√®mes critiques.",
    pastIncidents: "Tentative de ransomware en 2023 (contenue), panne majeure du SIH en 2022 (4h d'interruption), fuite de donn√©es mineures en 2021 (corrig√©e)"
  },

  // M√©tadonn√©es
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString()
};

async function testMissionCreation() {
  console.log('üß™ TEST DU NOUVEAU FORMULAIRE DE MISSION AVEC CONTEXTE');
  console.log('=====================================================');
  console.log('üéØ OBJECTIF: Tester la cr√©ation d\'une mission avec contexte complet pour les agents IA');
  console.log('');

  try {
    // V√©rifier l'√©tat initial
    console.log('üîç V√âRIFICATION DE L\'√âTAT INITIAL...');
    const initialSnapshot = await getDocs(collection(db, 'missions'));
    console.log(`üìä Missions existantes: ${initialSnapshot.size}`);

    // Cr√©er la mission de test
    console.log('\nüöÄ CR√âATION DE LA MISSION DE TEST...');
    console.log(`üìù Nom: ${testMissionData.name}`);
    console.log(`üè¢ Organisation: ${testMissionData.missionContext.organizationName}`);
    console.log(`üè• Secteur: ${testMissionData.missionContext.sector}`);
    console.log(`üìä Taille: ${testMissionData.missionContext.organizationSize}`);
    console.log(`‚ö° Criticit√©: ${testMissionData.missionContext.criticalityLevel}`);
    console.log(`‚è±Ô∏è  D√©lai: ${testMissionData.missionContext.timeframe}`);

    const docRef = await addDoc(collection(db, 'missions'), testMissionData);
    console.log(`‚úÖ Mission cr√©√©e avec ID: ${docRef.id}`);

    // V√©rifier la cr√©ation
    console.log('\nüîç V√âRIFICATION DE LA CR√âATION...');
    const finalSnapshot = await getDocs(collection(db, 'missions'));
    console.log(`üìä Missions apr√®s cr√©ation: ${finalSnapshot.size}`);

    // Afficher le contexte pour les agents IA
    console.log('\nü§ñ CONTEXTE DISPONIBLE POUR LES AGENTS IA:');
    console.log('===========================================');
    console.log(`üè¢ Organisation: ${testMissionData.missionContext.organizationName}`);
    console.log(`üè• Secteur: ${testMissionData.missionContext.sector}`);
    console.log(`üìä Taille: ${testMissionData.missionContext.organizationSize}`);
    console.log(`üåç P√©rim√®tre: ${testMissionData.missionContext.geographicScope}`);
    console.log(`‚ö° Criticit√©: ${testMissionData.missionContext.criticalityLevel}`);
    console.log(`üîß Composants SI: ${testMissionData.missionContext.siComponents.length} √©l√©ments`);
    console.log(`‚öôÔ∏è  Processus: ${testMissionData.missionContext.criticalProcesses.length} processus critiques`);
    console.log(`üë• Parties prenantes: ${testMissionData.missionContext.stakeholders.length} identifi√©es`);
    console.log(`üìã R√©glementations: ${testMissionData.missionContext.regulations.length} applicables`);
    console.log(`üí∞ Enjeux financiers: ${testMissionData.missionContext.financialStakes}`);
    console.log(`üõ°Ô∏è  Maturit√© s√©curit√©: ${testMissionData.missionContext.securityMaturity}`);
    console.log(`üéØ Objectifs: ${testMissionData.missionContext.missionObjectives.length} d√©finis`);
    console.log(`‚è±Ô∏è  D√©lai: ${testMissionData.missionContext.timeframe}`);

    console.log('\nüìã D√âTAILS DES COMPOSANTS SI:');
    testMissionData.missionContext.siComponents.forEach((component, index) => {
      console.log(`   ${index + 1}. ${component}`);
    });

    console.log('\n‚öôÔ∏è  D√âTAILS DES PROCESSUS CRITIQUES:');
    testMissionData.missionContext.criticalProcesses.forEach((process, index) => {
      console.log(`   ${index + 1}. ${process}`);
    });

    console.log('\nüéØ OBJECTIFS DE LA MISSION:');
    testMissionData.missionContext.missionObjectives.forEach((objective, index) => {
      console.log(`   ${index + 1}. ${objective}`);
    });

    console.log('\nüìã R√âGLEMENTATIONS APPLICABLES:');
    testMissionData.missionContext.regulations.forEach((regulation, index) => {
      console.log(`   ${index + 1}. ${regulation}`);
    });

    console.log('\nüéâ TEST R√âUSSI !');
    console.log('================');
    console.log('‚úÖ Mission cr√©√©e avec contexte complet');
    console.log('‚úÖ Donn√©es structur√©es pour les agents IA');
    console.log('‚úÖ Contexte m√©tier disponible pour suggestions intelligentes');
    console.log('‚úÖ Informations sectorielles pour recommandations sp√©cialis√©es');
    console.log('‚úÖ Pr√™t pour utilisation par les agents A2A');

    return docRef.id;

  } catch (error) {
    console.error('‚ùå ERREUR lors du test:', error);
    throw error;
  }
}

// Fonction pour tester les suggestions d'agents IA bas√©es sur le contexte
async function testAIContextUsage(missionId) {
  console.log('\nü§ñ SIMULATION DES SUGGESTIONS IA BAS√âES SUR LE CONTEXTE');
  console.log('======================================================');

  const contextBasedSuggestions = {
    workshop1: {
      businessValues: [
        "Donn√©es patients (confidentialit√© critique)",
        "Continuit√© des soins (disponibilit√© critique)",
        "Dossiers m√©dicaux (int√©grit√© critique)",
        "Syst√®me de prescription (s√©curit√© critique)"
      ],
      reasoning: "Bas√© sur le secteur 'Sant√© et m√©dico-social' et les processus critiques identifi√©s"
    },
    workshop2: {
      riskSources: [
        "Cybercriminels (ransomware hospitalier)",
        "Initi√©s malveillants (acc√®s privil√©gi√©s)",
        "Hacktivistes (donn√©es sensibles)",
        "√âtats (espionnage m√©dical)"
      ],
      reasoning: "Bas√© sur les incidents pass√©s et le niveau de criticit√© 'Critique'"
    },
    workshop3: {
      strategicScenarios: [
        "Chiffrement des donn√©es patients par ransomware",
        "Vol de donn√©es m√©dicales par initi√©",
        "Interruption du syst√®me de prescription",
        "Compromission du dossier m√©dical partag√©"
      ],
      reasoning: "Bas√© sur les composants SI critiques et les processus m√©tier"
    },
    securityMeasures: [
      "Chiffrement des donn√©es de sant√© (HDS)",
      "Authentification forte pour personnel m√©dical",
      "Sauvegarde s√©curis√©e temps r√©el",
      "Monitoring 24h/24 des syst√®mes critiques",
      "Plan de continuit√© d'activit√© m√©dical"
    ],
    reasoning: "Bas√© sur les r√©glementations HDS/ANSSI et les contraintes 24h/24"
  };

  console.log('üéØ SUGGESTIONS POUR WORKSHOP 1 (Valeurs m√©tier):');
  contextBasedSuggestions.workshop1.businessValues.forEach((value, index) => {
    console.log(`   ${index + 1}. ${value}`);
  });
  console.log(`   üí° Raisonnement: ${contextBasedSuggestions.workshop1.reasoning}`);

  console.log('\nüéØ SUGGESTIONS POUR WORKSHOP 2 (Sources de risque):');
  contextBasedSuggestions.workshop2.riskSources.forEach((source, index) => {
    console.log(`   ${index + 1}. ${source}`);
  });
  console.log(`   üí° Raisonnement: ${contextBasedSuggestions.workshop2.reasoning}`);

  console.log('\nüéØ SUGGESTIONS POUR WORKSHOP 3 (Sc√©narios strat√©giques):');
  contextBasedSuggestions.workshop3.strategicScenarios.forEach((scenario, index) => {
    console.log(`   ${index + 1}. ${scenario}`);
  });
  console.log(`   üí° Raisonnement: ${contextBasedSuggestions.workshop3.reasoning}`);

  console.log('\nüõ°Ô∏è  SUGGESTIONS DE MESURES DE S√âCURIT√â:');
  contextBasedSuggestions.securityMeasures.forEach((measure, index) => {
    console.log(`   ${index + 1}. ${measure}`);
  });
  console.log(`   üí° Raisonnement: ${contextBasedSuggestions.reasoning}`);

  console.log('\n‚ú® AVANTAGES DU CONTEXTE ENRICHI:');
  console.log('=================================');
  console.log('‚úÖ Suggestions sp√©cifiques au secteur de la sant√©');
  console.log('‚úÖ Prise en compte des r√©glementations HDS/ANSSI');
  console.log('‚úÖ Adaptation aux contraintes 24h/24');
  console.log('‚úÖ Recommandations bas√©es sur les incidents pass√©s');
  console.log('‚úÖ Priorisation selon la criticit√© des processus');
  console.log('‚úÖ Coh√©rence avec la maturit√© s√©curit√© actuelle');
}

// Ex√©cution principale
async function main() {
  try {
    const missionId = await testMissionCreation();
    await testAIContextUsage(missionId);
    
    console.log('\nüéâ TOUS LES TESTS R√âUSSIS !');
    console.log('===========================');
    console.log('‚úÖ Nouveau formulaire de mission fonctionnel');
    console.log('‚úÖ Contexte complet disponible pour les agents IA');
    console.log('‚úÖ Suggestions intelligentes et contextualis√©es');
    console.log('‚úÖ Pr√™t pour utilisation en production');
    
  } catch (error) {
    console.error('\nüí• √âCHEC DES TESTS:', error);
    process.exit(1);
  }
}

// Lancement du script
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { testMissionCreation, testAIContextUsage };
