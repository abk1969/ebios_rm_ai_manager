/**
 * üéØ VALIDATEUR WORKFLOW EBIOS RM
 * Validation de la coh√©rence m√©tier entre les 5 ateliers selon ANSSI
 */

import { BusinessValue, EssentialAsset, DreadedEvent, RiskSource, StrategicScenario } from '@/types/ebios';

export interface WorkflowValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
  recommendations: string[];
  score: number; // 0-100
}

export interface EbiosWorkflowData {
  businessValues: BusinessValue[];
  essentialAssets: EssentialAsset[];
  dreadedEvents: DreadedEvent[];
  riskSources: RiskSource[];
  strategicScenarios: StrategicScenario[];
}

export class EbiosWorkflowValidator {
  
  /**
   * Validation compl√®te du workflow EBIOS RM
   */
  static validateCompleteWorkflow(data: EbiosWorkflowData): WorkflowValidationResult {
    const result: WorkflowValidationResult = {
      isValid: true,
      errors: [],
      warnings: [],
      recommendations: [],
      score: 100
    };

    // Validation Atelier 1 ‚Üí 2
    this.validateWorkshop1To2Flow(data, result);
    
    // Validation Atelier 2 ‚Üí 3  
    this.validateWorkshop2To3Flow(data, result);
    
    // Validation coh√©rence globale
    this.validateGlobalCoherence(data, result);
    
    // Calcul score final
    result.score = this.calculateCoherenceScore(result);
    result.isValid = result.errors.length === 0 && result.score >= 70;
    
    return result;
  }

  /**
   * Validation flux Atelier 1 ‚Üí Atelier 2
   * V√©rification que les biens essentiels supportent bien les valeurs m√©tier
   */
  private static validateWorkshop1To2Flow(data: EbiosWorkflowData, result: WorkflowValidationResult): void {
    // V√©rification relation Biens essentiels ‚Üê Valeurs m√©tier
    data.businessValues.forEach(businessValue => {
      const supportingAssets = data.essentialAssets.filter(asset => 
        asset.supportedBusinessValues.includes(businessValue.id)
      );
      
      if (supportingAssets.length === 0) {
        result.errors.push(
          `Valeur m√©tier "${businessValue.name}" n'est support√©e par aucun bien essentiel`
        );
      }
    });

    // V√©rification √©v√©nements redout√©s li√©s aux biens essentiels  
    data.essentialAssets.forEach(asset => {
      const relatedEvents = data.dreadedEvents.filter(event => 
        event.essentialAssetId === asset.id
      );
      
      if (relatedEvents.length === 0) {
        result.warnings.push(
          `Bien essentiel "${asset.name}" n'a aucun √©v√©nement redout√© associ√©`
        );
      }
    });
  }

  /**
   * Validation flux Atelier 2 ‚Üí Atelier 3
   * V√©rification que les sources de risque peuvent causer les √©v√©nements redout√©s
   */
  private static validateWorkshop2To3Flow(data: EbiosWorkflowData, result: WorkflowValidationResult): void {
    // Chaque √©v√©nement redout√© doit avoir au moins une source de risque capable de le causer
    data.dreadedEvents.forEach(event => {
      const capableSources = data.riskSources.filter(source => {
        // Logique m√©tier EBIOS RM : coh√©rence capacit√©/impact
        const hasCapability = this.checkSourceCapabilityForEvent(source, event);
        return hasCapability;
      });
      
      if (capableSources.length === 0) {
        result.warnings.push(
          `√âv√©nement redout√© "${event.name}" n'a aucune source de risque identifi√©e capable de le causer`
        );
      }
    });

    // V√©rification sc√©narios strat√©giques
    data.strategicScenarios.forEach(scenario => {
      if (!scenario.riskSourceId || !scenario.dreadedEventId) {
        result.errors.push(
          `Sc√©nario strat√©gique "${scenario.name}" doit lier une source de risque √† un √©v√©nement redout√©`
        );
      }
      
      // V√©rification coh√©rence source ‚Üí √©v√©nement dans le sc√©nario
      const riskSource = data.riskSources.find(rs => rs.id === scenario.riskSourceId);
      const dreadedEvent = data.dreadedEvents.find(de => de.id === scenario.dreadedEventId);
      
      if (riskSource && dreadedEvent) {
        const isCoherent = this.checkScenarioCoherence(riskSource, dreadedEvent);
        if (!isCoherent) {
          result.warnings.push(
            `Sc√©nario "${scenario.name}" : incoh√©rence entre capacit√©s de la source "${riskSource.name}" et l'√©v√©nement "${dreadedEvent.name}"`
          );
        }
      }
    });
  }

  /**
   * Validation coh√©rence globale EBIOS RM
   */
  private static validateGlobalCoherence(data: EbiosWorkflowData, result: WorkflowValidationResult): void {
    // V√©rification couverture compl√®te des valeurs m√©tier
    const uncoveredBusinessValues = data.businessValues.filter(bv => {
      const hasEssentialAsset = data.essentialAssets.some(ea => 
        ea.supportedBusinessValues.includes(bv.id)
      );
      return !hasEssentialAsset;
    });
    
    if (uncoveredBusinessValues.length > 0) {
      result.errors.push(
        `Valeurs m√©tier sans couverture par des biens essentiels : ${uncoveredBusinessValues.map(bv => bv.name).join(', ')}`
      );
    }

    // Recommandations m√©thodologiques ANSSI
    if (data.businessValues.length < 3) {
      result.recommendations.push(
        'ANSSI recommande d\'identifier au minimum 3-5 valeurs m√©tier pour une analyse compl√®te'
      );
    }
    
    if (data.riskSources.length < 5) {
      result.recommendations.push(
        '√âlargir l\'analyse des sources de risque (recommandation : minimum 5 sources diversifi√©es)'
      );
    }
  }

  /**
   * V√©rification capacit√© d'une source de risque √† causer un √©v√©nement redout√©
   */
  private static checkSourceCapabilityForEvent(source: RiskSource, event: DreadedEvent): boolean {
    // Logique m√©tier EBIOS RM
    if (source.capability === 4 && event.gravity >= 3) return true;
    if (source.capability === 3 && event.gravity >= 2) return true;  
    if (source.capability >= 2 && event.gravity >= 1) return true;
    
    return false;
  }

  /**
   * V√©rification coh√©rence d'un sc√©nario strat√©gique
   */
  private static checkScenarioCoherence(riskSource: RiskSource, dreadedEvent: DreadedEvent): boolean {
    // Coh√©rence motivation/objectif
    const motivationAlignment = this.checkMotivationAlignment(riskSource, dreadedEvent);
    const capabilityAlignment = this.checkSourceCapabilityForEvent(riskSource, dreadedEvent);
    
    return motivationAlignment && capabilityAlignment;
  }

  /**
   * V√©rification alignement motivation/objectif  
   */
  private static checkMotivationAlignment(riskSource: RiskSource, dreadedEvent: DreadedEvent): boolean {
    // Logique m√©tier EBIOS RM : certaines motivations sont plus probables pour certains impacts
    
    // Sources financi√®res ‚Üí impacts financiers directs
    if (riskSource.motivation === 'financial' && dreadedEvent.name.includes('financ')) return true;
    
    // Sources id√©ologiques ‚Üí impacts r√©putationnels  
    if (riskSource.motivation === 'ideological' && dreadedEvent.name.includes('r√©putation')) return true;
    
    // Par d√©faut, accepter la coh√©rence (logique m√©tier √† affiner selon contexte)
    return true;
  }

  /**
   * Calcul du score de coh√©rence globale
   */
  private static calculateCoherenceScore(result: WorkflowValidationResult): number {
    let score = 100;
    
    // P√©nalit√©s pour erreurs critiques
    score -= result.errors.length * 20;
    
    // P√©nalit√©s pour warnings  
    score -= result.warnings.length * 5;
    
    // Bonus pour recommandations suivies (logique inverse)
    score -= result.recommendations.length * 2;
    
    return Math.max(0, Math.min(100, score));
  }

  /**
   * Validation sp√©cifique d'un atelier
   */
  static validateWorkshop(workshopId: number, data: any): WorkflowValidationResult {
    const result: WorkflowValidationResult = {
      isValid: true,
      errors: [],
      warnings: [],
      recommendations: [],
      score: 100
    };

    switch (workshopId) {
      case 1:
        this.validateWorkshop1(data, result);
        break;
      case 2:
        this.validateWorkshop2(data, result);
        break;
      case 3:
        this.validateWorkshop3(data, result);
        break;
      case 4:
        this.validateWorkshop4(data, result);
        break;
      case 5:
        this.validateWorkshop5(data, result);
        break;
      default:
        result.errors.push('Atelier non reconnu');
    }

    result.score = this.calculateCoherenceScore(result);
    result.isValid = result.errors.length === 0;
    
    return result;
  }

  private static validateWorkshop1(data: any, result: WorkflowValidationResult): void {
    if (!data.businessValues || data.businessValues.length === 0) {
      result.errors.push('Au moins une valeur m√©tier doit √™tre d√©finie');
    }
    
    if (!data.essentialAssets || data.essentialAssets.length === 0) {
      result.errors.push('Au moins un bien essentiel doit √™tre d√©fini');  
    }

    if (!data.dreadedEvents || data.dreadedEvents.length === 0) {
      result.errors.push('Au moins un √©v√©nement redout√© doit √™tre d√©fini');
    }
  }

  private static validateWorkshop2(data: any, result: WorkflowValidationResult): void {
    if (!data.riskSources || data.riskSources.length === 0) {
      result.errors.push('Au moins une source de risque doit √™tre identifi√©e');
    }

    // Validation caract√©risation sources
    if (data.riskSources) {
      data.riskSources.forEach((source: any, index: number) => {
        if (!source.type || !source.motivation || !source.capability) {
          result.warnings.push(`Source de risque ${index + 1} : caract√©risation incompl√®te (type, motivation, capacit√©s)`);
        }
      });
    }
  }

  private static validateWorkshop3(data: any, result: WorkflowValidationResult): void {
    if (!data.strategicScenarios || data.strategicScenarios.length === 0) {
      result.errors.push('Au moins un sc√©nario strat√©gique doit √™tre d√©fini');
    }
  }

  private static validateWorkshop4(data: any, result: WorkflowValidationResult): void {
    if (!data.operationalScenarios || data.operationalScenarios.length === 0) {
      result.errors.push('Au moins un sc√©nario op√©rationnel doit √™tre d√©fini');
    }
  }

  private static validateWorkshop5(data: any, result: WorkflowValidationResult): void {
    if (!data.securityMeasures || data.securityMeasures.length === 0) {
      result.errors.push('Au moins une mesure de s√©curit√© doit √™tre d√©finie');
    }
  }
}

export default EbiosWorkflowValidator;